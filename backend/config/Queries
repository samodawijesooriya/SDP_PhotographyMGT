-- Create Database
CREATE DATABASE IF NOT EXISTS photography_services;
USE photography_services;

-- Event Table
CREATE TABLE event (
    eventId INT AUTO_INCREMENT PRIMARY KEY,
    eventName VARCHAR(100) NOT NULL,
    description TEXT
);

-- Package Tier Table
CREATE TABLE packageTier (
    packageTierId INT AUTO_INCREMENT PRIMARY KEY,
    packageTierName VARCHAR(50) NOT NULL
);

-- Package Table
CREATE TABLE package (
    packageId INT AUTO_INCREMENT PRIMARY KEY,
    packageName VARCHAR(100) NOT NULL,
    eventId INT,
    packageTierId INT,
    investedAmount DECIMAL(10,2) NOT NULL,
    coverageHours INT,
    FOREIGN KEY (eventId) REFERENCES event(eventId),
    FOREIGN KEY (packageTierId) REFERENCES packageTier(packageTierId)
);

-- Items Table
CREATE TABLE items (
    itemId INT AUTO_INCREMENT PRIMARY KEY,
    itemType VARCHAR(100) NOT NULL
);

-- Package Items Table
CREATE TABLE packageItems (
    packageId INT,
    itemId INT,
    quantity INT,
    PRIMARY KEY (packageId, itemId),
    FOREIGN KEY (packageId) REFERENCES package(packageId),
    FOREIGN KEY (itemId) REFERENCES items(itemId)
);

-- Details Table
CREATE TABLE details (
    detailId INT AUTO_INCREMENT PRIMARY KEY,
    detailDescription TEXT
);

-- Package Details Table
CREATE TABLE packageDetails (
    packageId INT,
    detailId INT,
    PRIMARY KEY (packageId, detailId),
    FOREIGN KEY (packageId) REFERENCES package(packageId),
    FOREIGN KEY (detailId) REFERENCES details(detailId)
);

-- Sample Data Insertion

-- Insert Events
INSERT INTO event (eventName, description) VALUES 
('Wedding', "Capturing the most special day of a couple\'s life"),
('Homecoming', 'Celebrating return or milestone events'),
('Engagement', 'Pre-wedding celebration and photo session'),
('Birthday', 'Marking another year of life'),
('Graduation', 'Commemorating academic achievements');

-- Insert Package Tiers
INSERT INTO packageTier (packageTierName) VALUES 
('Lite'),
('Classic'),
('Basic'),
('Premium'),
('Luxury');

-- Insert Packages
INSERT INTO package (packageName, eventId, packageTierId, investedAmount, coverageHours) VALUES 
('Wedding Lite Package', 1, 1, 80000.00, 10),
('Wedding Classic Package', 1, 2, 100000.00, 10),
('Homecoming Basic Package', 2, 3, 50000.00, 8),
('Engagement Premium Package', 3, 4, 130000.00, 6);

-- Insert Items
INSERT INTO items (itemType) VALUES 
('Digital Images'),
('Wooden Framed Portrait'),
('Thankyou Cards'),
('Fine Art Album'),
('Slideshow');

-- Insert Package Items
INSERT INTO packageItems (packageId, itemId, quantity) VALUES 
(1, 1, 200),  -- Wedding Lite: Digital Images
(1, 2, 2),    -- Wedding Lite: Wooden Framed Portraits
(1, 3, 50),   -- Wedding Lite: Thankyou Cards
(2, 1, 200),  -- Wedding Classic: Digital Images
(2, 4, 1),    -- Wedding Classic: Fine Art Album
(3, 1, 100),  -- Homecoming Basic: Digital Images
(4, 5, 1);    -- Engagement Premium: Slideshow

-- Insert Details
INSERT INTO details (detailDescription) VALUES 
('10 Hours Event Coverage'),
('Main Photo Session at Preferred Location'),
('Getting Ready at Hotel'),
('Unedited Images Included'),
('Professionally Retouched Images');

-- Insert Package Details
INSERT INTO packageDetails (packageId, detailId) VALUES 
(1, 1),
(1, 2),
(1, 3),
(2, 1),
(2, 2),
(2, 4),
(3, 1),
(3, 2),
(4, 5);

-- Create Indexes for Performance
CREATE INDEX idx_event_name ON event(eventName);
CREATE INDEX idx_package_name ON package(packageName);
CREATE INDEX idx_item_type ON items(itemType);

CREATE TABLE booking (
    bookingId INT AUTO_INCREMENT PRIMARY KEY,
    userID INT REFERENCES user(userID),
    packageId INT REFERENCES package(packageID),
    fullName VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    billingAddress TEXT NOT NULL,
    billingMobile VARCHAR(20) NOT NULL,
    eventDate DATE NOT NULL,
    eventTime TIME NOT NULL,
    venue VARCHAR(255) NOT NULL,
    bookingStatus VARCHAR(255),
    bookingType VARCHAR(255),
    totalAmount DECIMAL(10, 2) NOT NULL,
    paidAmount DECIMAL(10, 2) DEFAULT 0.00,
    notes TEXT
);

INSERT INTO booking 
(userID, packageId, fullName, email, billingAddress, billingMobile, eventDate, eventTime, venue, bookingStatus, bookingType, totalAmount, paidAmount, notes) 
VALUES 
(1, 3, 'Amal Perera', 'amal@example.com', '123 Main Street, Colombo 05', '0771234567', '2023-08-15', '14:00:00', 'Cinnamon Grand Colombo', 'confirmed', 'full', 150000.00, 150000.00, 'Wedding photography package with 2 photographers'),
(2, 1, 'Nimal Silva', 'nimal@example.com', '45 Park Avenue, Kandy', '0712345678', '2023-09-22', '10:00:00', 'Queens Hotel Kandy', 'pending', 'advance', 85000.00, 20000.00, 'Pre-wedding photoshoot, beach location preferred'),
(3, 2, 'Kamala Jayawardena', 'kamala@example.com', '78 Hill Street, Galle', '0761234567', '2023-07-30', '16:00:00', 'Lighthouse Galle', 'pencil', 'pencil', 65000.00, 0.00, 'Engagement ceremony, around 100 guests'),
(1, 4, 'Sunil Dias', 'sunil@example.com', '22 Lake Road, Colombo 03', '0701234567', '2023-10-05', '09:00:00', 'Taj Samudra', 'confirmed', 'full', 200000.00, 200000.00, 'Corporate event photography with same-day editing'),
(4, 2, 'Priya Fernando', 'priya@example.com', '56 Temple Road, Negombo', '0781234567', '2023-09-10', '18:00:00', 'Jetwing Blue Negombo', 'pending', 'advance', 125000.00, 20000.00, 'Birthday celebration, indoor venue');


-- Create the Bank Deposit table
CREATE TABLE BankDeposits (
    bankDepositId INT AUTO_INCREMENT PRIMARY KEY,
    referenceNo VARCHAR(100) NOT NULL,
    depositDate DATE NOT NULL,
    depositAmount DECIMAL(10, 2) NOT NULL,
    receiptImage VARCHAR(255),
    notes TEXT,
);

INSERT INTO BankDeposits 
(referenceNo, depositDate, depositAmount, receiptImage, notes) 
VALUES 
('BOC12345678', '2023-06-15', 20000.00, 'uploads/receipts/receipt_boc_12345.jpg', 'Advance payment for wedding package'),
('COM87654321', '2023-06-20', 20000.00, 'uploads/receipts/receipt_com_87654.jpg', 'Deposit for birthday event'),
('NSB45678912', '2023-06-25', 150000.00, 'uploads/receipts/receipt_nsb_45678.jpg', 'Full payment for corporate event'),
('PEO98765432', '2023-06-28', 65000.00, 'uploads/receipts/receipt_peo_98765.jpg', 'Payment for engagement shoot'),
('HNB56781234', '2023-07-01', 200000.00, 'uploads/receipts/receipt_hnb_56781.jpg', 'Complete payment for Taj event');


CREATE TABLE Payments (
    paymentId INT AUTO_INCREMENT PRIMARY KEY,
    bookingId INT NOT NULL REFERENCES booking(bookingId),
    paymentAmount DECIMAL(10, 2) NOT NULL,
    paymentDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    paymentMethod ENUM('credit_card', 'debit_card', 'cash_deposit') NOT NULL,
    bankDepositId INT REFERENCES bankdeposits(bankdepositId),
    paymentStatus ENUM('pending', 'completed', 'failed', 'refunded') NOT NULL DEFAULT 'pending',
    notes TEXT
);

INSERT INTO Payments 
(bookingId, paymentAmount, paymentDate, paymentMethod, bankDepositId, paymentStatus, notes) 
VALUES 
(1, 150000.00, '2023-06-25 14:30:00', 'cash_deposit', 3, 'completed', 'Full payment received and verified'),
(2, 20000.00, '2023-06-15 10:15:00', 'cash_deposit', 1, 'completed', 'Advance payment received'),
(3, 0.00, NULL, NULL, NULL, 'pending', 'Pencil booking, no payment required yet'),
(4, 200000.00, '2023-07-01 16:45:00', 'cash_deposit', 5, 'completed', 'Full payment for corporate event'),
(5, 20000.00, '2023-06-20 11:30:00', 'cash_deposit', 2, 'completed', 'Deposit received for birthday event'),
(2, 65000.00, '2023-07-15 09:20:00', 'credit_card', NULL, 'completed', 'Remaining balance paid via credit card'),
(5, 105000.00, '2023-07-25 13:10:00', 'debit_card', NULL, 'pending', 'Final payment scheduled before event');



// after dinesh sir's comments on (2025/03/03)
// this one removed
-- Customer Table
-- CREATE TABLE Customer (
--     customerId INT PRIMARY KEY AUTO_INCREMENT,
--     fullName VARCHAR(100) NOT NULL,
--     email VARCHAR(100) UNIQUE NOT NULL,
--     billingAddress VARCHAR(255),
--     billingMobile VARCHAR(20)
-- );

-- Package Table (assuming this exists, adding for reference)
CREATE TABLE Package (
    packageId INT PRIMARY KEY AUTO_INCREMENT,
    packageName VARCHAR(100) NOT NULL,
    packageDescription TEXT,
    packagePrice DECIMAL(10, 2) NOT NULL,
    isActive BOOLEAN DEFAULT TRUE
);

-- Booking Table
CREATE TABLE Booking (
    bookingId INT PRIMARY KEY AUTO_INCREMENT,
    customerId INT NOT NULL,
    packageId INT NOT NULL,
    eventDate DATE NOT NULL,
    eventTime TIME NOT NULL,
    venue VARCHAR(255) NOT NULL,
    bookingStatus ENUM('Pending', 'Confirmed', 'Cancelled', 'Completed') NOT NULL DEFAULT 'Pending',
    bookingType ENUM('Wedding', 'Corporate', 'Birthday', 'Other') NOT NULL,
    
    notes TEXT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (customerId) REFERENCES Customer(customerId) ON DELETE RESTRICT,
    FOREIGN KEY (packageId) REFERENCES Package(packageId) ON DELETE RESTRICT
);

-- Credit Card Table
CREATE TABLE CreditCard (
    creditCardId INT PRIMARY KEY AUTO_INCREMENT,
    customerId INT NOT NULL,
    cardholderName VARCHAR(100) NOT NULL,
    cardNumber VARCHAR(255) NOT NULL, -- should be encrypted in production
    expiryDate VARCHAR(7) NOT NULL, -- stored as MM/YYYY
    cvv VARCHAR(255), -- should be encrypted in production and probably not stored long-term
    FOREIGN KEY (customerId) REFERENCES Customer(customerId) ON DELETE CASCADE
);

-- Payment Table
CREATE TABLE Payment (
    paymentId INT PRIMARY KEY AUTO_INCREMENT,
    bookingId INT NOT NULL,
    paymentAmount DECIMAL(10, 2) NOT NULL,
    paymentDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    paymentMethod VARCHAR(50) NOT NULL,
    bankDepositId INT,
    creditCardId INT,
    paymentStatus VARCHAR(50) NOT NULL,
    notes TEXT,
    FOREIGN KEY (bankDepositId) REFERENCES bankDeposits(bankDepositId) ON DELETE RESTRICT,
    FOREIGN KEY (bookingId) REFERENCES booking(bookingId) ON DELETE RESTRICT,
    FOREIGN KEY (creditCardId) REFERENCES creditCard(creditCardId) ON DELETE SET NULL
);

// new customer

CREATE TABLE customers (
    customer_id INT PRIMARY KEY, -- Same as user_id
    full_name VARCHAR(100) NOT NULL,
    address TEXT NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    FOREIGN KEY (customer_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Additional indexes for better performance
CREATE INDEX idx_booking_customer ON Booking(customerId);
CREATE INDEX idx_booking_status ON Booking(bookingStatus);
CREATE INDEX idx_booking_date ON Booking(eventDate);
CREATE INDEX idx_payment_booking ON Payment(bookingId);
CREATE INDEX idx_payment_status ON Payment(paymentStatus);
CREATE INDEX idx_creditcard_customer ON CreditCard(customerId);